/**
 * Script background standalone pour surveiller l'activit√© des onglets
 * Version sans imports ES6 pour compatibilit√© avec les service workers
 */

// Classe TabStorage int√©gr√©e
class TabStorage {
  constructor() {
    this.storageKey = "tabActivityTracker";
    this.maxEntries = 100; // Limite pour √©viter un stockage excessif
  }

  /**
   * Sauvegarde ou met √† jour l'entr√©e d'un onglet
   */
  async saveTabActivity(tabId, url, title, favIconUrl = null) {
    try {
      console.log("üíæ [Storage] Sauvegarde onglet:", { tabId, url, title });

      // Ignorer les URLs syst√®me et internes
      if (this.shouldIgnoreUrl(url)) {
        console.log("‚è≠Ô∏è [Storage] URL ignor√©e:", url);
        return;
      }

      const tabData = await this.getTabData();
      const timestamp = Date.now();

      // Cr√©er ou mettre √† jour l'entr√©e pour cet onglet
      const tabKey = `tab_${tabId}`;
      const entry = {
        tabId,
        url,
        title: title || this.extractTitleFromUrl(url),
        favIconUrl,
        lastUpdated: timestamp,
        domain: this.extractDomain(url),
      };

      tabData[tabKey] = entry;
      console.log("üìù [Storage] Entr√©e cr√©√©e/mise √† jour:", entry);

      // Nettoyer les anciennes entr√©es si n√©cessaire
      await this.cleanupOldEntries(tabData);

      await chrome.storage.local.set({ [this.storageKey]: tabData });
      console.log("‚úÖ [Storage] Donn√©es sauvegard√©es dans le storage");
    } catch (error) {
      console.error("‚ùå [Storage] Erreur lors de la sauvegarde:", error);
    }
  }

  /**
   * R√©cup√®re toutes les activit√©s d'onglets
   */
  async getTabData() {
    try {
      const result = await chrome.storage.local.get(this.storageKey);
      const data = result[this.storageKey] || {};
      console.log(
        "üìñ [Storage] Donn√©es r√©cup√©r√©es:",
        Object.keys(data).length,
        "entr√©es"
      );
      return data;
    } catch (error) {
      console.error("‚ùå [Storage] Erreur lors de la r√©cup√©ration:", error);
      return {};
    }
  }

  /**
   * R√©cup√®re les activit√©s d'onglets tri√©es par date
   */
  async getSortedTabActivities() {
    const tabData = await this.getTabData();
    return Object.values(tabData).sort((a, b) => b.lastUpdated - a.lastUpdated);
  }

  /**
   * Supprime une entr√©e sp√©cifique
   */
  async deleteEntry(tabKey) {
    try {
      const tabData = await this.getTabData();
      if (tabData[tabKey]) {
        delete tabData[tabKey];
        await chrome.storage.local.set({ [this.storageKey]: tabData });
      }
    } catch (error) {
      console.error("Erreur lors de la suppression de l'entr√©e:", error);
    }
  }

  /**
   * Efface tout l'historique
   */
  async clearAllData() {
    try {
      await chrome.storage.local.remove(this.storageKey);
    } catch (error) {
      console.error("Erreur lors de l'effacement:", error);
    }
  }

  /**
   * V√©rifie si une URL doit √™tre ignor√©e
   */
  shouldIgnoreUrl(url) {
    const ignoredProtocols = [
      "chrome:",
      "chrome-extension:",
      "moz-extension:",
      "about:",
      "edge:",
    ];
    const ignoredUrls = ["newtab", "blank"];

    return (
      ignoredProtocols.some((protocol) => url.startsWith(protocol)) ||
      ignoredUrls.some((ignored) => url.includes(ignored)) ||
      url.length < 5
    );
  }

  /**
   * Extrait le domaine d'une URL
   */
  extractDomain(url) {
    try {
      return new URL(url).hostname;
    } catch {
      return "Domaine inconnu";
    }
  }

  /**
   * Extrait un titre basique depuis l'URL
   */
  extractTitleFromUrl(url) {
    try {
      const urlObj = new URL(url);
      return urlObj.hostname + urlObj.pathname;
    } catch {
      return url.substring(0, 50) + "...";
    }
  }

  /**
   * Nettoie les anciennes entr√©es pour √©viter un stockage excessif
   */
  async cleanupOldEntries(tabData) {
    const entries = Object.entries(tabData);
    if (entries.length > this.maxEntries) {
      // Trier par date et garder seulement les plus r√©centes
      const sortedEntries = entries.sort(
        (a, b) => b[1].lastUpdated - a[1].lastUpdated
      );
      const toKeep = sortedEntries.slice(0, this.maxEntries);

      // Reconstruire l'objet avec seulement les entr√©es √† garder
      const cleanedData = {};
      toKeep.forEach(([key, value]) => {
        cleanedData[key] = value;
      });

      await chrome.storage.local.set({ [this.storageKey]: cleanedData });
    }
  }
}

// Classe principale du tracker
class TabActivityTracker {
  constructor() {
    this.storage = new TabStorage();
    this.updateThrottleTime = 2000; // D√©lai minimum entre les mises √† jour (2s)
    this.lastUpdateTimes = new Map(); // Cache des derni√®res mises √† jour par onglet

    this.initializeListeners();
  }

  /**
   * Initialise tous les √©couteurs d'√©v√©nements
   */
  initializeListeners() {
    console.log("üîß Initialisation des listeners...");

    // √âcouter les changements d'onglet actif
    chrome.tabs.onActivated.addListener((activeInfo) => {
      console.log("üéØ Event: onActivated", activeInfo);
      this.handleTabActivated(activeInfo.tabId);
    });

    // √âcouter les mises √† jour d'onglets (changement d'URL, titre, etc.)
    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
      console.log("üéØ Event: onUpdated", { tabId, changeInfo, tab });
      this.handleTabUpdated(tabId, changeInfo, tab);
    });

    // √âcouter la fermeture d'onglets
    chrome.tabs.onRemoved.addListener((tabId) => {
      console.log("üéØ Event: onRemoved", tabId);
      this.handleTabRemoved(tabId);
    });

    // √âcouter les changements de fen√™tre active
    chrome.windows.onFocusChanged.addListener((windowId) => {
      console.log("üéØ Event: onFocusChanged", windowId);
      if (windowId !== chrome.windows.WINDOW_ID_NONE) {
        this.handleWindowFocusChanged(windowId);
      }
    });

    // √âcouter la cr√©ation d'onglets
    chrome.tabs.onCreated.addListener((tab) => {
      console.log("üéØ Event: onCreated", tab);
      this.handleTabCreated(tab);
    });

    console.log("‚úÖ Listeners initialis√©s");
    // Initialiser au d√©marrage
    this.initializeOnStartup();
  }

  /**
   * G√®re la cr√©ation d'un nouvel onglet
   */
  async handleTabCreated(tab) {
    try {
      console.log("üÜï Nouvel onglet cr√©√©:", tab.id, tab.url);
      if (tab.url && !this.storage.shouldIgnoreUrl(tab.url)) {
        await this.saveTabActivity(tab);
      }
    } catch (error) {
      console.error("Erreur lors de la cr√©ation d'onglet:", error);
    }
  }

  /**
   * G√®re l'activation d'un onglet
   */
  async handleTabActivated(tabId) {
    try {
      console.log("üîÑ Onglet activ√©:", tabId);
      const tab = await chrome.tabs.get(tabId);
      if (tab && tab.url) {
        console.log("üíæ Sauvegarde onglet activ√©:", tab.url);
        await this.saveTabActivity(tab);
      }
    } catch (error) {
      console.error("Erreur lors de l'activation d'onglet:", error);
    }
  }

  /**
   * G√®re les mises √† jour d'onglets
   */
  async handleTabUpdated(tabId, changeInfo, tab) {
    try {
      console.log("üîÑ Onglet mis √† jour:", tabId, changeInfo);

      // Ne sauvegarder que si l'URL ou le titre a chang√© et que la page est compl√®tement charg√©e
      if (
        (changeInfo.url || changeInfo.title) &&
        tab.status === "complete" &&
        tab.url
      ) {
        // V√©rifier le throttling pour √©viter trop de mises √† jour
        if (this.shouldThrottleUpdate(tabId)) {
          console.log("‚è±Ô∏è Mise √† jour throttl√©e pour onglet:", tabId);
          return;
        }

        console.log("üíæ Sauvegarde onglet mis √† jour:", tab.url);
        await this.saveTabActivity(tab);
        this.lastUpdateTimes.set(tabId, Date.now());
      }
    } catch (error) {
      console.error("Erreur lors de la mise √† jour d'onglet:", error);
    }
  }

  /**
   * G√®re la fermeture d'onglets
   */
  async handleTabRemoved(tabId) {
    try {
      // Nettoyer le cache de throttling
      this.lastUpdateTimes.delete(tabId);

      // Note: On ne supprime pas l'entr√©e du storage car on veut garder l'historique
      // m√™me apr√®s fermeture de l'onglet
    } catch (error) {
      console.error("Erreur lors de la fermeture d'onglet:", error);
    }
  }

  /**
   * G√®re le changement de focus de fen√™tre
   */
  async handleWindowFocusChanged(windowId) {
    try {
      // Obtenir l'onglet actif de la fen√™tre focalis√©e
      const tabs = await chrome.tabs.query({
        active: true,
        windowId: windowId,
      });
      if (tabs.length > 0 && tabs[0].url) {
        await this.saveTabActivity(tabs[0]);
      }
    } catch (error) {
      console.error("Erreur lors du changement de focus:", error);
    }
  }

  /**
   * Sauvegarde l'activit√© d'un onglet
   */
  async saveTabActivity(tab) {
    try {
      console.log("üíæ Sauvegarde activit√© onglet:", {
        id: tab.id,
        url: tab.url,
        title: tab.title,
        favIconUrl: tab.favIconUrl,
      });

      await this.storage.saveTabActivity(
        tab.id,
        tab.url,
        tab.title,
        tab.favIconUrl
      );

      console.log("‚úÖ Activit√© onglet sauvegard√©e avec succ√®s");
    } catch (error) {
      console.error("‚ùå Erreur lors de la sauvegarde:", error);
    }
  }

  /**
   * V√©rifie si une mise √† jour doit √™tre throttl√©e
   */
  shouldThrottleUpdate(tabId) {
    const lastUpdate = this.lastUpdateTimes.get(tabId);
    if (!lastUpdate) return false;

    return Date.now() - lastUpdate < this.updateThrottleTime;
  }

  /**
   * Initialise le tracker au d√©marrage de l'extension
   */
  async initializeOnStartup() {
    try {
      console.log("üöÄ Initialisation du tracker d'onglets...");

      // Enregistrer tous les onglets ouverts au d√©marrage
      const tabs = await chrome.tabs.query({});
      console.log(`üìã ${tabs.length} onglets trouv√©s au d√©marrage`);

      for (const tab of tabs) {
        if (tab.url && !this.storage.shouldIgnoreUrl(tab.url)) {
          console.log("üíæ Sauvegarde onglet au d√©marrage:", tab.url);
          await this.saveTabActivity(tab);
        } else {
          console.log("‚è≠Ô∏è Onglet ignor√©:", tab.url);
        }
      }

      console.log("‚úÖ Initialisation termin√©e");
    } catch (error) {
      console.error("‚ùå Erreur lors de l'initialisation:", error);
    }
  }
}

// Initialiser le tracker
console.log("üöÄ D√©marrage du service worker...");
const tracker = new TabActivityTracker();

// G√©rer l'installation/mise √† jour de l'extension
chrome.runtime.onInstalled.addListener((details) => {
  console.log(
    "Extension Tab Activity Tracker install√©e/mise √† jour:",
    details.reason
  );
});

// G√©rer le d√©marrage du service worker
chrome.runtime.onStartup.addListener(() => {
  console.log("üîÑ Service worker red√©marr√©");
});

// G√©rer les messages du popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log("üì® Message re√ßu:", request);

  if (request.action === "getTabData") {
    tracker.storage.getSortedTabActivities().then((data) => {
      sendResponse({ success: true, data });
    });
    return true; // Indique une r√©ponse asynchrone
  }

  if (request.action === "clearAllData") {
    tracker.storage.clearAllData().then(() => {
      sendResponse({ success: true });
    });
    return true;
  }

  if (request.action === "deleteEntry") {
    tracker.storage.deleteEntry(request.tabKey).then(() => {
      sendResponse({ success: true });
    });
    return true;
  }
});

console.log("‚úÖ Service worker initialis√© avec succ√®s");

